Day 1
1. Refer to "Installation Instructions" & complete the same.

2. MUST go through "day1_help\day1_notes.rtf" and  from day1-data\day1_help
\day1_notes 
(only till whatever  we have covered)

3. Go through  code samples from day1-data\code\src

4. Solve (Hands on)

4.0
Accept 5 doubles from user (scanner)
Print it's average.

After creating PrintAverage.java (under day1_lab\src)
Open cmd prompt from the same src folder
To compile
javac -d ..\bin PrintAverage.java
cd ..\bin
To run 
java PrintAverage


4.1 Write Java program - 
Display food menu to user. User will select items from menu along with the quantity. (eg 1. Dosa 2. Samosa 3. Idli ... 0 . Generate Bill ) Assign fixed prices to food items(hard code the prices)
When user enters 'Generate Bill' option(0) , display total bill & exit.

OR
Write Java program for the following - 
It should  run till user enters any other option than add or sub or multiply or divide
Prompt user to enter the input operation : (add|subtract|multiply|divide) & 2 numbers(double)
Display the result of the operation.
Use Scanner for accepting all inputs from user. 
Hint : use switch-case

5. Reading home work 
Please read 
"day 1\day1_help\day1_notes.pdf"



Day 2

1. MUST revise from today's sequence , day2.pdf  & mainly from 
-  day2-data\code
1.1 Revise :  mem pics for Java data areas(stack,heap,method area),
1.2 Garbage collection introduction

1.3 
 Solve this (Discuss memory picture)
Given : Box class is compiled.
In main method  of TestBox
Box b1=new Box(1,2,3);
b1++;
Box b2=b1;
b1=new Box(3,4,5);
//any objects marked for garbage collection ? how many ? 
Box b3=b1;
b2=new Box(4,5,6);
//any objects marked for garbage collection ? how many ?


2. Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int l)
   {
     level=l;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}
Are there any objects marked for GC ?

3. What will happen (solve ready code samples : along with mem pics )
day2-data\day2_help\params_passing
3.1 TestParamPassing1.java
3.2 TestParamPassing2.java

4. Hands on

Create a  class Point2D   for representing a point in x & y(int) co-ordinate system.
(Tight encapsulation please !)

4.1 Create a parameterized constructor to accept x & y co-ords.

4.2 Add  show() method  --to return point's x & y co-ords


4.3 
Add a non static  , isEqual method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise.
Hint - Ask yourself - 
How will you invoke it from the tester ?
Hint 
In Tester

Point2D p1=new Pont2D(....);
Point2D p2=new Pont2D(....);
sop(p1 +" "+p2);
boolean status=p1.isEqual(p2);


In Point2D class
- x,y
constructor
//method declaration - isEqual
//this=p1 , anotherPoint=p2
boolean isEqual(Point2D anotherPoint)
{
 sop(this);
 sop(anotherPoint);
 return (this.x==anotherPoint.x) && (this.y==anotherPoint.y);
}

4.4 
Add a non static method , calculateDistance , to calc distance between 2 points
Hint : use distance formula.

Hint - Ask yourself - 
How will you invoke it from the tester ?


4.5  Create a separate Driver(main)  class(for UI )  , "TestPoint" , with main(..)

4.6  Accept x,y co-ordinates for 2 points & store the co-ordinates
4.7  Display x,y co-ordinates of both of the points plotted  (using show() method)

4.8  (OPTIONAL WORK)
Find out if the points  are same or different (Hint : isEqual)

Print the message accordingly. (print SAME or DIFFERENT)
If points are not same , display distance between these 2 points.


Day 3
1. Complete Pending work.

2. Refer to today's sequence  & notes (pdf) 
-  to revise access specifiers , packages ,  classpath , arrays

3. This assignment has to be done without IDE

3.1 Modify yesterday's Point2D's assignment 
Re factor (modify) & add Point2D class under the package - com.developers.geometry
Add TestPoint class under the package - com.tester

3.2 Make necessary changes , to remove compilation errors.
(How to compile ?
Compile from src
javac -d ..\bin com\tester\TestPoint.java
)

3.3 To run the class ,
cd ..\bin
How will you run it ?
java com.tester.TestPoint

2.4 How will you ensure that user should be able to run com.tester.TestPoint class from anywhere?
Hint - set CLASSPATH
java -cp 
OR 
set classpath : as environment variable.


4. Start the IDE (STS 4.30 : Eclipse IDE with Spring plug in)
Use workspace as the same <code> folder

4.1 Edit JRE
Window -> Preferences -> Type JRE in search box -> Installed JREs -> Choose JDK 21
(Refer to - "day3-data\help\day3_help\diagrams\screenshot-1.png")

4.2 Import day3_ide , in your workspace , to revise 
- arrays of primitive type & array of references
- for-each loop
- for vs for-each loop

How to import existing project in Eclipse IDE ?
File -> import -> General -> Existing project from Workspace 
-> Browse to project folder -> check the check box : Copy project in the workspace  -> Finish.
(refer - screenshot-2.png)

5. Can you use for-each loop , to double box widths for the boxes having volume < 100 ? 


6. Optional assignment - Do it in IDE

6.1 Copy  earlier Point2D class .

6.2    Create a driver / tester   class(for UI)  , in the "tester" package "TestPoints" , with main(..)

1. Prompt user , how many points to plot? 
Create suitable array. (Hint : array of references)

2. Show following options

Options : 
1. Plot a point
Inputs : array index , x  ,y
Check boundary conditions  & also check if some point is already plotted at the same index , if not then store the point details.
In case of any errors , display suitable error message.

2.   Display x,y co-ordinates of all the points plotted so far ,using for-each loop.

0. Exit 



Day 4 


1. import day4.1 in your workspace.
 1.1  Refer to TestStatic.java , with day 3 pdf 
        - to revise static keyword.
 1.2  Refer to TestConstrInvocation.java
        - to revise constr invocation in multi level inheritance hierarchy.

2.  import day4.2 in your workspace.
 - Refer to Person , Student , Facult classes.
 - revise super keyword (for super class constr invocation)
 - method overriding
 - Refer to testers
  - Test1.java (direct referencing)
  - Test2.java (indirect referencing) , up casting & dynamic method dispatch

2.1 Complete pending tasks (complete optinal tasks of Day 3 first)

3. Optional assignment for  Inheritance, Polymorphism, Casting (Bank Account System)
By the end of this assignment, you will be able to
- Apply inheritance to model real-world entities.
- Use method overriding and polymorphism.
- Perform upcasting , downcasting .

Problem Statement

A bank(eg HDFC)  offers support for creating  different types of accounts to its customers:

Saving Account  -> applicable for earning interest.

Current Account ->  allows overdraft facility.

Bank Account (common parent) -> defines general features of all accounts.

You are required to build a simple banking system using Java OOP concepts.

Assignments
Q1. Basic Inheritance

Create a class BankAccount with:

Fields: accountNumber (int), balance (double) , customer name (String) , phone number (String)

Add suitable constructor

Methods:

deposit(double amount)

withdraw(double amount) (should not allow negative balance by default)

getAccountSummary() - returns complete details of the account , in string format

getBalance() - returns account balance.

Create subclasses:

SavingAccount -> add interestRate field and method applyInterest().

CurrentAccount ->  add overdraftLimit field and method useOverdraftFacility().

SavingAccount -> should not allow any negative balance in  withdraw operation .It should fail in such case.

CurrentAccount -> should  allow any negative balance, in withdraw operation .It should not fail till it exceeds the overdraft limit. After overdraft limit is exceeded then withdraw operation should fail.


Task: Write a TestBanking class , with main() that creates one saving and one current account, performs deposits and withdrawals, and prints account summary.
You can hard code the values (no need to add Scanner today !)



Day 5

1. import day5.1 in your workspace
1.1 Open EventOrganizerApp.java
 - Trace the flow , line by line , to revise array of references , inheritance , upcasting , downcasting & instanceof checking


1.2 IMPORTANT
If you are still not comfortable with building new logic , you can solve Event Organizer assignment , on your own from scratch.

- Problem statement
 - Create Menu based Java application  , to organize an event  for  Students , Faculties (later can add Guest Speaker , Center Head , Alumni etc....)

Initially solve 1-4 options.

1. Prompt user for the event capacity.
2 Create suitable data structure to hold the participant details
3 Options
1. Register Student -
i/p : student details

2. Register Faculty -
i/p : faculty details

3. Display all participant details (use  for-each)

4. Display specific participant details
i/p : seat no

5. Student Evaluation By Faculty
i/p : faculty seat no , student name , student grade (A+ , A , B+ , B , C+ , C)

6. Feedback submission By student
i/p : student seat no , faculty name, feedback comment

0. Exit




2. Try n solve Banking assignment
- refer to assignment help


Optional Work - 
Run time Polymorphism with Upcasting

Write a Tester - TestBank
Given - This bank can support max accounts = 100.

Options
1. Open Saving account
User i/p - accountNumber , balance  , customer name  , phone number , interest rate

2. Open Current account
User i/p - accountNumber , balance  , customer name  , phone number ,overdraftLimit 

3. Display account summary
User i/p - account number

4. Deposit
User i/p - account number , amount

5. Withdraw
User i/p - account number , amount


Day 6
No new assignments !!!!!
Please use this weekend to catch up with revision and pending work.

Revise today's work first.
1. import day6.1 
 - Refer TestShapes.java 
 - revise dynamic initialization of array .
 - mainly why was downcasting & instanceof required.

2. import day6.2
 - Refer TestShapes.java 
 - Revise abstract methods 
 - Abstract class
 - Notice the clean code , using abstraction.

3. import day6.3 , to revise interfaces.
 - Refer to TestPayments
 - revise array of interface type of references (Payment[])
 - revise upcasting , downcasting & instance of checking , in interface & implementation class examples.

4. import day6.4 , to check
 - Will there be a diamond issue , with multiple interfaces ?
 (package p1)
 - multiple inheritance with interfaces
 (package p2)


Day 7
1. import day7.1 in your workspace.
- Revise basics of exception handling
 - including try , catch , finally , throw , throws , try-with-resources & custom exceptions

2. Refer to the Banking assignment
In the saving account class , you must be already checking for minimum balance condition (or balance < 0) right ?
 - You are currently returning a boolean , indicating success or failure.
 - Meaning you have to check status & change the flow of execution.
- No more !!!!!

Modify
Problem Statement
Your withdraw method should throw a custom exception
 - InsufficientBalanceException
 - Create it as a checked exception n throw this exception in case of the error.
- This will help you to apply exception handling to banking scenario.
- Take the reference of Vehicle Speed scenario.


Day 8
1. import day8.1 , to revise 
 - immutable strings
 - == vs equals
 - literal vs non literal strings
 - Go through important String class methods
 - charAt,compareTo,contains,isEmpty , isBlank,copyValueOf,format,getBytes,toCharArray,toLowerCase,indexOf,lastIndexOf,split,replace,startsWith,endsWith,length,intern,trim,strip,stripLeading,stripTrailing

- StringBuilder vs String
- StringBuilder constructors & methods
- trick questions


-  revise
 - Date / Time handling in Java
 - java.util.Date class & its methods
 - For parsing n formatting
  - java.text.SimpleDateFormat & DateFormat class methods



2. Hands on
Refer to Day 5 Banking assignment.
(It was array based , with different options - to open saving or current account account , show a/c summary , withdraw , deposit ...)

In open account case (either saving or current)
 - You are accepting account no from User.
 - Add new validation rule.
  - accounts with duplicate account no , should not get added.

Hint -Override  equals method in BankAccount class.


OR

 When should be 2 bank accounts considered same ? if the account nos are same right ?
 Test with Object's equals method
 Any problem ?
Solution ?

