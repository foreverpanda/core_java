Case study - Customer management system
It will be built , over next few days.

Typical  Options
1. Sign up (customer registration)
Accept customer details
Validate all inputs.
In case of successful validations , display customer details via toString or display error mesg via custom exception.

2. Sign in (login)
i/p : email n password
o/p : Successful login message or error message(Invalid email or password -via custom exception)

3. Change password
i/p : email n old password n new password
o/p : Successful password updation  or error message(Invalid email or password -via custom exception)

4. Un subscribe customer
i/p : customer email

5. Display all customers.
and later many more.....
0. Exit 

NOTE - 
1.Customer should be assigned system generated (auto increment) customer id : int
Store - first name, last name email(string),password(string),registrationAmount(double),dob(LocalDate),plan(ServicePlan : enum)
2 customers can't have duplicate email.

2. ServicePlans n their charges -
SILVER : 1000 
GOLD : 2000
DIAMOND : 5000
PLATINUM : 10000

3. Add suitable custom exception class

4. validation rules
(No need to add all the validation rules initially. You can just add the easiest one n test it out)

4.1 no dup customers 
(i.e if the customer tries to register using existing email , raise custom exception)

4.2 Validate plan
plan must be of supported types

4.3 reg amount must match with the plan

4.4 email must be well formed  and it should end with either
.com | .org | .net

4.5 strong password 


5. Business logic 
5.1 CustomerManagementService - i/f

5.2 CustomerManagementServiceImpl - implementation class


6. Create a Tester(CustomerManagementSystem) , with UI , using Scanner
main --
try(Scanner sc=new Scanner(...)) {
//init phase - start up 
  create dependency - service impl class instance
  exit=false
  while(!exit) {
    display options 
     try {
    switch(option)
    {
        case 1 : sign up
        Accept the i/ps - scanner
        Invoke Service class method --> validation rule 
        break;
        .......
    }
  } catch-all - retry mesg , while loop continues...
  }
  
} if needed - catch-all - app terminates !




