Lambda expressions

It's derived from lambda caculus. 
It was a big change in calculus world , which gave tremedous ease in maths

Now the same concept is being used in programming languages.
1st language to use lambda 
LISP
c , c++ , c# , scala , javascript , python

Finally in java also(Java SE 8 onwards)

Background

Java is an object-oriented language. With the exception of primitive data types, everything in Java is an object. Even an array is an Object. Every class creates instances that are objects. There is no way of defining just a function / method which stays in Java all by itself. There is no way of passing a method as argument or returning a method body for that instance.
i.e passing the behaviour was not possible till java 8.

It was slightly possible using anonymous inner classes --but that still required us to write a class !


What is lambda expression ?

Concise anonymous function which can be passed as an argument to a higher order function or can be returned from it.

It has
1. list of params
2. body (expression or statement) 

Lambda expressions in Java is usually written using syntax (argument) -> (body). For example:

(type1 arg1, type2 arg2...) -> { body }

 
Following are some examples of Lambda expressions.

1.(int a, int b) -> {  return a + b; }
OR can be reduced to 
(int a, int b) ->  a + b
OR further can be reduced to
(a,b) -> a+b
 
2. () -> System.out.println("Hello World")
 
3. s ->  System.out.println(s)
 
4. () -> 42
 
5. () ->  3.1415

Above is just a syntax of lambda . But how to use them ?
Answer is ---You can use lambda expressions as targets of  functional i/f reference.





Main Differences between Lambda Expression and Anonymous class

1. One key difference between using Anonymous class and Lambda expression is the use of "this" keyword. 

For anonymous class  this  keyword resolves to anonymous class, whereas for lambda expression  this  keyword resolves to enclosing class where lambda is written.

2. Another difference between lambda expression and anonymous class is in the way these two are compiled. 
Java compiler compiles lambda expressions and convert them into private method of the class. 






